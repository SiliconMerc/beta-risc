# | x: long(2)      |                                        | .=0                 |
# | :-------------- | -------------------------------------- | ------------------- |
# | y: long(2)      |                                        | x=32'd5 .=4 y=32'd2 |
# | c: long(123456) |                                        | .=8 c=32'd5         |
# | ...             | r1=00000 r2=00001 r3=00010             |                     |
# | LD(x, r1)       | 011000 00000 11111 0000_0000_0000_0000 |                     |
# | SUBC(r1,3,r1)   | 110001 00000 00000 0000_0000_0000_0011 |                     |
# | LD(y, r2)       | 011000 00001 11111 0000_0000_0000_0100 |                     |
# | LD(c, r3)       | 011000 00010 11111 0000_0000_0000_1000 |                     |
# | ADD(r2,r3,r2)   | 100000 00001 00010 00001 0000_0000_000 |                     |
# | MUL(r2,r1,r1)   | 100010 00000 00001 00000 0000_0000_000 |                     |
# | ST(r1,y)        | 011001 00000 11111 0000_0000_0000_0100 |                                       |                     |
# inst=[
# "01100000000111110000000000000000",
# "11000100000000000000000000000011",
# "01100000001111110000000000000100",
# "01100000010111110000000000001000",
# "10000000001000100000100000000000",
# "10001000000000010000000000000000",
# "01100100000111110000000000000100"]
# data=[
#     "00000000000000000000000000000101",
#     "00000000000000000000000000000010",
#     "00000000000000000000000000000101"
# ]
# | n:	long(123)          |                                        | .=0 n=32'b11        |
# | ------------------------ | -------------------------------------- | ------------------- |
# | ans:	long(0)          |                                        | .=4 ans=32'd0       |
# | ...                      | r1=00000 r2=00001 r3=00010             |                     |
# | ADDC(r31, 1, r1)         | 110000 00000 11111 0000_0000_0000_0001 | \| r1 = 1           |
# | LD(n, r2)                | 011000 00001 11111 0000_0000_0000_0000 | \| r2 = n           |
# | loop: BEQ(r2, done, r31) | 011101 11111 00001 0000_0000_0000_0011 | \| while (r2 != 0)  |
# | MUL(r1, r2, r1)          | 100010 00000 00001 00000 0000_0000_000 | \| r1 = r1 * r2     |
# | SUBC(r2, 1, r2)          | 110001 00001 00001 0000_0000_0000_0001 | \| r2 = r2 - 1      |
# | BEQ(r31, loop, r31)      | 011101 11111 11111 1111_1111_1111_1100 | \| Always branches! |
# | done: ST(r1, ans, r31)   | 011001 00000 11111 0000_0000_0000_0100 | \| ans = r1         |
inst=[
"11000000000111110000000000000001",
"01100000001111110000000000000000",
"01110111111000010000000000000011",
"10001000000000010000000000000000",
"11000100001000010000000000000001",
"01110111111111111111111111111100",
"01100100000111110000000000000100"
]
data=[
    "00000000000000000000000000000011",
    "00000000000000000000000000000000"
]

Mbit=32
size=2**Mbit
f_inst=open("mem_inst.txt","w")
f_data=open("mem_data.txt","w")
for i in range(size):
    if(i==max(len(inst),len(data))):
        break
    if(i<len(inst)):
        str=inst[i][0:8]+"\n"+inst[i][8:16]+"\n"+inst[i][16:24]+"\n"+inst[i][24:32]+"\n"
        # print(inst[i][0:7])
        f_inst.write(str)
    # else:  
        # f_inst.write("00000000000000000000000000000000")
    if(i<len(data)):
        str=data[i][0:8]+"\n"+data[i][8:16]+"\n"+data[i][16:24]+"\n"+data[i][24:32]+"\n"
        f_data.write(str)
    # else:
        # f_data.write("00000000000000000000000000000000")
f_inst.close()
f_data.close()
print("Completed")